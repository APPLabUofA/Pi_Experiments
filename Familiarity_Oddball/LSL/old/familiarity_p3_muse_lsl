import time
import os
from random import randint
from random import shuffle
import datetime
import numpy
import pygame
from pylsl import StreamInfo, StreamOutlet, local_clock

###create our stream variables###
info = StreamInfo('Markers', 'Markers', 1, 0, 'int32', 'myuidw43536')

###next make an outlet to record the streamed data###
outlet = StreamOutlet(info)

###setup GPIO pins and initialise pygame###
pygame.mixer.pre_init(44100,-16,2,512)
pygame.init()
pygame.display.init()
pygame.mixer.init()

###setup the display screen and fixation###
pygame.mouse.set_visible(0)
disp_info = pygame.display.Info()
screen = pygame.display.set_mode((disp_info.current_w, disp_info.current_h),pygame.FULLSCREEN)
x_center = disp_info.current_w/2
y_center = disp_info.current_h/2
black = pygame.Color(0, 0, 0)
white = pygame.Color(255,255,255)
img = pygame.image.load('/home/pi/Experiments/Familiarity_Oddball/Images/test.jpg')

##### Define variables #####
partnum = "001"
stop_eeg = [0]
numpy.savetxt("/home/pi/Experiments/Familiarity_Oddball/Stop_EEG.csv", (stop_eeg), delimiter=',',fmt="%s")

###setup variables to record times###
vid_time 	= []
trig_time 	= []
trig_type	= []
delay_length 	= []

###define the number of trials, and tones per trial###
trials = 10
low_rate = 0.8
high_rate = 0.2
low_tone = numpy.zeros(int(trials*low_rate))
high_tone = numpy.ones(int(trials*high_rate))
low_tone_list = low_tone.tolist()
high_tone_list = high_tone.tolist()
tones = low_tone_list + high_tone_list
shuffle(tones)

###setup our instruction screens###
pygame.font.init()
myfont = pygame.font.SysFont('Times New Roman', 20)
instructions = myfont.render('Focus on the central fixation. Press the Spacebar when you are ready to start.', True, white)
break_screen = myfont.render('Feel free to take a break at this time. Press the Spacebar when you are ready to start.', True, white)

###show our instructions, and wait for a response###
screen.blit(instructions,(x_center-((instructions.get_rect().width)/2),y_center))
pygame.display.flip()
key_pressed = 0
pygame.event.clear()
while key_pressed == 0:
    event = pygame.event.wait()
    if event.type == pygame.QUIT:
        pygame.quit()
        sys.exit()
    elif event.type == pygame.KEYDOWN:
        if event.key == pygame.K_SPACE:
            key_pressed = 1

screen.fill(pygame.Color("black")) 
pygame.draw.line(screen, (255, 255, 255), (x_center-10, y_center), (x_center+10, y_center),4)
pygame.draw.line(screen, (255, 255, 255), (x_center, y_center-10), (x_center, y_center+10),4)
pygame.display.flip()
time.sleep(1)

###wait for button press to start experiment###
vid_start = time.time()
timestamp = local_clock()
outlet.push_sample([3], timestamp)
time.sleep(1)

for i_tone in range(len(tones)):
	if i_tone in (trials*0.25,trials*0.50,trials*0.75):
		###show the break screen, and wait for a response###
		screen.fill(pygame.Color("black")) 
		screen.blit(break_screen,(x_center-((instructions.get_rect().width)/2),y_center))
		pygame.display.flip()
		key_pressed = 0
		pygame.event.clear()
		while key_pressed == 0:
    			event = pygame.event.wait()
    			if event.type == pygame.QUIT:
        			pygame.quit()
        			sys.exit()
    			elif event.type == pygame.KEYDOWN:
        			if event.key == pygame.K_SPACE:
            				key_pressed = 1
		screen.fill(pygame.Color("black")) 
		pygame.draw.line(screen, (255, 255, 255), (x_center-10, y_center), (x_center+10, y_center),4)
		pygame.draw.line(screen, (255, 255, 255), (x_center, y_center-10), (x_center, y_center+10),4)
		pygame.display.flip()
		time.sleep(1)
	else:
		###wait for a random amount of time between tones###
		delay = ((randint(0,500))*0.001)+1.00
		delay_length.append(delay)
		if tones[i_tone] == 0:#low tone
			pygame.mixer.music.load('/home/pi/Experiments/Auditory_Oddball/low_tone.wav')
			trig_type.append(1)
			###send triggers###
			timestamp = local_clock()
    			outlet.push_sample([1], timestamp)
			trig_time.append(time.time() - vid_start)	
			###present image###
			screen.fill(pygame.Color("black")) 
			screen.blit(img,((x_center-(img.get_rect().width/2)),(y_center-(img,get_rect().height/2))))
			pygame.display.flip()
			time.sleep(0.5)
			screen.fill(pygame.Color("black")) 
			pygame.draw.line(screen, (255, 255, 255), (x_center-10, y_center), (x_center+10, y_center),4)
			pygame.draw.line(screen, (255, 255, 255), (x_center, y_center-10), (x_center, y_center+10),4)
			pygame.display.flip()
			###wait for a random amount of time and set the trigger back to zero###
			time.sleep(delay)
		elif tones[i_tone] == 1:#high tone
			pygame.mixer.music.load('/home/pi/Experiments/Auditory_Oddball/high_tone.wav')
			trig_type.append(2)
			###send triggers###
			timestamp = local_clock()
    			outlet.push_sample([2], timestamp)
			trig_time.append(time.time() - vid_start)	
			###present image###
			screen.fill(pygame.Color("black")) 
			screen.blit(img,((x_center-(img.get_rect().width/2)),(y_center-(img,get_rect().height/2))))
			pygame.display.flip()
			time.sleep(0.5)
			screen.fill(pygame.Color("black")) 
			pygame.draw.line(screen, (255, 255, 255), (x_center-10, y_center), (x_center+10, y_center),4)
			pygame.draw.line(screen, (255, 255, 255), (x_center, y_center-10), (x_center, y_center+10),4)
			pygame.display.flip()
			###wait for a random amount of time and set the trigger back to zero###
			time.sleep(delay)

pygame.mouse.set_visible(0)
###save times###
while os.path.isfile("/home/pi/Experiments/Familiarity_Oddball/Data/LSL/Muse/Muse_Recorded_Trig_Info/%s_all_familiarity_p3_trigs_muse.csv"%(partnum)) == True:
    partnum = '00'+str(int(partnum)+1)
    if int(partnum) > 9:
        partnum = '0' + str(int(partnum))

filename    = "%s_all_familiarity_p3_trigs_muse"%(partnum)
filename_part = ("/home/pi/Experiments/Familiarity_Oddball/Data/LSL/Muse/Muse_Recorded_Trig_Info/%s.csv")%filename

numpy.savetxt(filename_part, (trig_type,trig_time,delay_length), delimiter=',',fmt="%s")

pygame.display.quit()
pygame.quit()		

time.sleep(5)
stop_eeg = [1]
numpy.savetxt("/home/pi/Experiments/Familiarity_Oddball/Stop_EEG.csv", (stop_eeg), delimiter=',',fmt="%s")
